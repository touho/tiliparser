{"version":3,"sources":["rewrite-pattern.js"],"names":[],"mappings":"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","file":"rewrite-pattern-compiled.js","sourcesContent":["var generate = require('regjsgen').generate;\nvar parse = require('regjsparser').parse;\nvar regenerate = require('regenerate');\nvar iuMappings = require('./data/iu-mappings.json');\nvar ESCAPE_SETS = require('./data/character-class-escape-sets.js');\n\nfunction getCharacterClassEscapeSet(character) {\n\tif (unicode) {\n\t\tif (ignoreCase) {\n\t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n\t\t}\n\t\treturn ESCAPE_SETS.UNICODE[character];\n\t}\n\treturn ESCAPE_SETS.REGULAR[character];\n}\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nfunction has(object, property) {\n\treturn hasOwnProperty.call(object, property);\n}\n\n// Prepare a Regenerate set containing all code points, used for negative\n// character classes (if any).\nvar UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n// Without the `u` flag, the range stops at 0xFFFF.\n// https://mths.be/es6#sec-pattern-semantics\nvar BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./u`. https://mths.be/es6#sec-atom\nvar DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n\t.remove(\n\t\t// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n\t\t0x000A, // Line Feed <LF>\n\t\t0x000D, // Carriage Return <CR>\n\t\t0x2028, // Line Separator <LS>\n\t\t0x2029  // Paragraph Separator <PS>\n\t);\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./` (only BMP code points).\nvar DOT_SET = DOT_SET_UNICODE.clone()\n\t.intersection(BMP_SET);\n\n// Add a range of code points + any case-folded code points in that range to a\n// set.\nregenerate.prototype.iuAddRange = function(min, max) {\n\tvar $this = this;\n\tdo {\n\t\tvar folded = caseFold(min);\n\t\tif (folded) {\n\t\t\t$this.add(folded);\n\t\t}\n\t} while (++min <= max);\n\treturn $this;\n};\n\nfunction assign(target, source) {\n\tfor (var key in source) {\n\t\t// Note: `hasOwnProperty` is not needed here.\n\t\ttarget[key] = source[key];\n\t}\n}\n\nfunction update(item, pattern) {\n\t// TODO: Test if memoizing `pattern` here is worth the effort.\n\tif (!pattern) {\n\t\treturn;\n\t}\n\tvar tree = parse(pattern, '');\n\tswitch (tree.type) {\n\t\tcase 'characterClass':\n\t\tcase 'group':\n\t\tcase 'value':\n\t\t\t// No wrapping needed.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Wrap the pattern in a non-capturing group.\n\t\t\ttree = wrap(tree, pattern);\n\t}\n\tassign(item, tree);\n}\n\nfunction wrap(tree, pattern) {\n\t// Wrap the pattern in a non-capturing group.\n\treturn {\n\t\t'type': 'group',\n\t\t'behavior': 'ignore',\n\t\t'body': [tree],\n\t\t'raw': '(?:' + pattern + ')'\n\t};\n}\n\nfunction caseFold(codePoint) {\n\treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n}\n\nvar ignoreCase = false;\nvar unicode = false;\nfunction processCharacterClass(characterClassItem) {\n\tvar set = regenerate();\n\tvar body = characterClassItem.body.forEach(function(item) {\n\t\tswitch (item.type) {\n\t\t\tcase 'value':\n\t\t\t\tset.add(item.codePoint);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tvar folded = caseFold(item.codePoint);\n\t\t\t\t\tif (folded) {\n\t\t\t\t\t\tset.add(folded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassRange':\n\t\t\t\tvar min = item.min.codePoint;\n\t\t\t\tvar max = item.max.codePoint;\n\t\t\t\tset.addRange(min, max);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tset.iuAddRange(min, max);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassEscape':\n\t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n\t\t\t\tbreak;\n\t\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t\t// reached. Code coverage tools should ignore it.\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t\t}\n\t});\n\tif (characterClassItem.negative) {\n\t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n\t}\n\tupdate(characterClassItem, set.toString());\n\treturn characterClassItem;\n}\n\nfunction processTerm(item) {\n\tswitch (item.type) {\n\t\tcase 'dot':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\t(unicode ? DOT_SET_UNICODE : DOT_SET).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'characterClass':\n\t\t\titem = processCharacterClass(item);\n\t\t\tbreak;\n\t\tcase 'characterClassEscape':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\tgetCharacterClassEscapeSet(item.value).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'alternative':\n\t\tcase 'disjunction':\n\t\tcase 'group':\n\t\tcase 'quantifier':\n\t\t\titem.body = item.body.map(processTerm);\n\t\t\tbreak;\n\t\tcase 'value':\n\t\t\tvar codePoint = item.codePoint;\n\t\t\tvar set = regenerate(codePoint);\n\t\t\tif (ignoreCase && unicode) {\n\t\t\t\tvar folded = caseFold(codePoint);\n\t\t\t\tif (folded) {\n\t\t\t\t\tset.add(folded);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate(item, set.toString());\n\t\t\tbreak;\n\t\tcase 'anchor':\n\t\tcase 'empty':\n\t\tcase 'group':\n\t\tcase 'reference':\n\t\t\t// Nothing to do here.\n\t\t\tbreak;\n\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t// reached. Code coverage tools should ignore it.\n\t\t/* istanbul ignore next */\n\t\tdefault:\n\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t}\n\treturn item;\n};\n\nmodule.exports = function(pattern, flags) {\n\tvar tree = parse(pattern, flags);\n\tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n\tunicode = flags ? flags.indexOf('u') > -1 : false;\n\tassign(tree, processTerm(tree));\n\treturn generate(tree);\n};\n"]}