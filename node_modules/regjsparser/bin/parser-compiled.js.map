{"version":3,"sources":["parser"],"names":[],"mappings":";;AACC,aAAW;;AAEV,MAAI,KAAK,QAAQ,IAAR,CAAT;AACA,MAAI,QAAQ,QAAQ,WAAR,EAAqB,KAAjC;AACA,MAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,MAAI,UAAU,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAd;AACA,MAAI,QAAQ,QAAQ,CAAR,CAAZ;AACA,MAAI,IAAJ;AACA,MAAI,MAAM,QAAQ,GAAlB;AACA,MAAI,OAAO,SAAP,IAAO,GAAW;AACpB,QAAI,4BAA4B,IAA5B,CAAiC,KAAjC,CAAJ,EAA6C;AAC3C,UAAI,CACF,YADE,EAEF,2BAFE,EAGF,6BAHE,EAIF,eAJE,EAKF,6BALE,EAMF,+BANE,EAOF,IAPE,CAOG,IAPH,CAAJ;AAQA,aAAO,QAAQ,IAAR,CAAa,CAAb,CAAP;AACD;;AAED,YAAQ,OAAR,CAAgB,UAAS,OAAT,EAAkB;AAChC,UAAI,MAAJ;AACA,UAAI;AACF,iBAAS,MAAM,OAAN,CAAT;AACA,YAAI,MAAM,MAAN,EAAc;AAChB,kBAAQ,IADQ;AAEhB,qBAAW,KAFK;AAGhB,oBAAU;AAHM,SAAd,CAAJ;AAKD,OAPD,CAOE,OAAM,KAAN,EAAa;AACb,YAAI,MAAM,OAAN,GAAgB,IAApB;AACA,YAAI,oEAAJ;AACA,YAAI,8DAAJ;AACA,YAAI,sDAAJ;AACA,YAAI,kBAAJ;AACA,YAAI,MAAM,KAAV;AACA,eAAO,QAAQ,IAAR,CAAa,CAAb,CAAP;AACD;AACF,KAlBD;AAmBA;AACA;AACA,WAAO,QAAQ,IAAR,CAAa,CAAb,CAAP;AACD,GAnCD;;AAqCA;AAED,CAhDA,GAAD","file":"parser-compiled.js","sourcesContent":["\n(function() {\n\n  var fs = require('fs');\n  var parse = require('../parser').parse;\n  var jsesc = require('jsesc');\n  var regexes = process.argv.splice(2);\n  var first = regexes[0];\n  var data;\n  var log = console.log;\n  var main = function() {\n    if (/^(?:-h|--help|undefined)$/.test(first)) {\n      log([\n        '\\nUsage:\\n',\n        '\\tregjsparser [regex ...]',\n        '\\tregjsparser [-h | --help]',\n        '\\nExamples:\\n',\n        '\\tregjsparser \\'^foo.bar$\\'',\n        '\\tregjsparser \\'[a-zA-Z0-9]\\''\n      ].join('\\n'));\n      return process.exit(1);\n    }\n\n    regexes.forEach(function(snippet) {\n      var result;\n      try {\n        result = parse(snippet);\n        log(jsesc(result, {\n          'json': true,\n          'compact': false,\n          'indent': '\\t'\n        }));\n      } catch(error) {\n        log(error.message + '\\n');\n        log('Error: failed to parse. Make sure the regular expression is valid.');\n        log('If you think this is a bug in regjsparser, please report it:');\n        log('\\thttps://github.com/jviereck/regjsparser/issues/new');\n        log('\\nStack trace:\\n');\n        log(error.stack);\n        return process.exit(1);\n      }\n    });\n    // Return with exit status 0 outside of the `forEach` loop, in case\n    // multiple regular expressions were passed in.\n    return process.exit(0);\n  };\n\n  main();\n\n}());\n"]}