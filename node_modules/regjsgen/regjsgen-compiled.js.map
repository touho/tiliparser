{"version":3,"sources":["regjsgen.js"],"names":[],"mappings":";;;;AAAA;;;;;AAKA,CAAE,aAAW;AACX;;AAEA;;AACA,MAAI,cAAc;AAChB,gBAAY,IADI;AAEhB,cAAU;AAFM,GAAlB;;AAKA;AACA,MAAI,OAAQ,mBAAmB,MAAnB,yCAAmB,MAAnB,MAA8B,MAA/B,IAA0C,IAArD;;AAEA;AACA,MAAI,UAAU,IAAd;;AAEA;AACA,MAAI,cAAc,mBAAmB,OAAnB,yCAAmB,OAAnB,MAA+B,OAAjD;;AAEA;AACA,MAAI,aAAa,mBAAmB,MAAnB,yCAAmB,MAAnB,MAA8B,MAA9B,IAAwC,CAAC,OAAO,QAAhD,IAA4D,MAA7E;;AAEA;AACA,MAAI,aAAa,eAAe,UAAf,IAA6B,QAAO,MAAP,yCAAO,MAAP,MAAiB,QAA9C,IAA0D,MAA3E;AACA,MAAI,eAAe,WAAW,MAAX,KAAsB,UAAtB,IAAoC,WAAW,MAAX,KAAsB,UAA1D,IAAwE,WAAW,IAAX,KAAoB,UAA3G,CAAJ,EAA4H;AAC1H,WAAO,UAAP;AACD;;AAED;;AAEA;;AAEA,MAAI,qBAAqB,OAAO,YAAhC;AACA,MAAI,QAAQ,KAAK,KAAjB;AACA,WAAS,aAAT,GAAyB;AACvB,QAAI,WAAW,MAAf;AACA,QAAI,YAAY,EAAhB;AACA,QAAI,aAAJ;AACA,QAAI,YAAJ;AACA,QAAI,QAAQ,CAAC,CAAb;AACA,QAAI,SAAS,UAAU,MAAvB;AACA,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,EAAP;AACD;AACD,QAAI,SAAS,EAAb;AACA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,UAAI,YAAY,OAAO,UAAU,KAAV,CAAP,CAAhB;AACA,UACE,CAAC,SAAS,SAAT,CAAD,IAAwB;AACxB,kBAAY,CADZ,IACiB;AACjB,kBAAY,QAFZ,IAEwB;AACxB,YAAM,SAAN,KAAoB,SAJtB,CAIgC;AAJhC,QAKE;AACA,gBAAM,WAAW,yBAAyB,SAApC,CAAN;AACD;AACD,UAAI,aAAa,MAAjB,EAAyB;AACvB;AACA,kBAAU,IAAV,CAAe,SAAf;AACD,OAHD,MAGO;AACL;AACA;AACA,qBAAa,OAAb;AACA,wBAAgB,CAAC,aAAa,EAAd,IAAoB,MAApC;AACA,uBAAgB,YAAY,KAAb,GAAsB,MAArC;AACA,kBAAU,IAAV,CAAe,aAAf,EAA8B,YAA9B;AACD;AACD,UAAI,QAAQ,CAAR,IAAa,MAAb,IAAuB,UAAU,MAAV,GAAmB,QAA9C,EAAwD;AACtD,kBAAU,mBAAmB,KAAnB,CAAyB,IAAzB,EAA+B,SAA/B,CAAV;AACA,kBAAU,MAAV,GAAmB,CAAnB;AACD;AACF;AACD,WAAO,MAAP;AACD;;AAED,WAAS,UAAT,CAAoB,IAApB,EAA0B,QAA1B,EAAoC;AAClC,QAAI,SAAS,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAC/B,UAAI,QAAQ,QAAZ,EAAsB;AACpB;AACD;;AAED,YAAM,MAAM,wBAAwB,IAA9B,CAAN;AACD;;AAED,eAAW,WAAW,cAAX,CAA0B,QAA1B,IACP,WAAW,QAAX,CADO,GAEN,WAAW,QAAX,IAAuB,OAAO,SAAS,QAAT,GAAoB,IAA3B,CAF5B;;AAIA,QAAI,SAAS,IAAT,CAAc,IAAd,CAAJ,EAAyB;AACvB;AACD;;AAED,UAAM,MAAM,wBAAwB,IAA9B,CAAN;AACD;;AAED;;AAEA,WAAS,QAAT,CAAkB,IAAlB,EAAwB;AACtB,QAAI,OAAO,KAAK,IAAhB;;AAEA,QAAI,SAAS,cAAT,CAAwB,IAAxB,KAAiC,OAAO,SAAS,IAAT,CAAP,IAAyB,UAA9D,EAA0E;AACxE,aAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACD;;AAED,UAAM,MAAM,wBAAwB,IAA9B,CAAN;AACD;;AAED;;AAEA,WAAS,mBAAT,CAA6B,IAA7B,EAAmC;AACjC,eAAW,KAAK,IAAhB,EAAsB,aAAtB;;AAEA,QAAI,QAAQ,KAAK,IAAjB;AAAA,QACI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CADpC;;AAGA,QAAI,UAAU,CAAd,EAAiB;AACf,aAAO,aAAa,MAAM,CAAN,CAAb,CAAP;AACD,KAFD,MAEO;AACL,UAAI,IAAI,CAAC,CAAT;AAAA,UACI,SAAS,EADb;;AAGA,aAAO,EAAE,CAAF,GAAM,MAAb,EAAqB;AACnB,kBAAU,aAAa,MAAM,CAAN,CAAb,CAAV;AACD;;AAED,aAAO,MAAP;AACD;AACF;;AAED,WAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC5B,eAAW,KAAK,IAAhB,EAAsB,QAAtB;;AAEA,YAAQ,KAAK,IAAb;AACE,WAAK,OAAL;AACE,eAAO,GAAP;AACF,WAAK,KAAL;AACE,eAAO,GAAP;AACF,WAAK,UAAL;AACE,eAAO,KAAP;AACF,WAAK,cAAL;AACE,eAAO,KAAP;AACF;AACE,cAAM,MAAM,mBAAN,CAAN;AAVJ;AAYD;;AAED,WAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B,eAAW,KAAK,IAAhB,EAAsB,sEAAtB;;AAEA,WAAO,SAAS,IAAT,CAAP;AACD;;AAED,WAAS,sBAAT,CAAgC,IAAhC,EAAsC;AACpC,eAAW,KAAK,IAAhB,EAAsB,gBAAtB;;AAEA,QAAI,cAAc,KAAK,IAAvB;AAAA,QACI,SAAS,cAAc,YAAY,MAA1B,GAAmC,CADhD;;AAGA,QAAI,IAAI,CAAC,CAAT;AAAA,QACI,SAAS,GADb;;AAGA,QAAI,KAAK,QAAT,EAAmB;AACjB,gBAAU,GAAV;AACD;;AAED,WAAO,EAAE,CAAF,GAAM,MAAb,EAAqB;AACnB,gBAAU,kBAAkB,YAAY,CAAZ,CAAlB,CAAV;AACD;;AAED,cAAU,GAAV;;AAEA,WAAO,MAAP;AACD;;AAED,WAAS,4BAAT,CAAsC,IAAtC,EAA4C;AAC1C,eAAW,KAAK,IAAhB,EAAsB,sBAAtB;;AAEA,WAAO,OAAO,KAAK,KAAnB;AACD;;AAED,WAAS,2BAAT,CAAqC,IAArC,EAA2C;AACzC,eAAW,KAAK,IAAhB,EAAsB,qBAAtB;;AAEA,QAAI,MAAM,KAAK,GAAf;AAAA,QACI,MAAM,KAAK,GADf;;AAGA,QAAI,IAAI,IAAJ,IAAY,qBAAZ,IAAqC,IAAI,IAAJ,IAAY,qBAArD,EAA4E;AAC1E,YAAM,MAAM,+BAAN,CAAN;AACD;;AAED,WAAO,kBAAkB,GAAlB,IAAyB,GAAzB,GAA+B,kBAAkB,GAAlB,CAAtC;AACD;;AAED,WAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC/B,eAAW,KAAK,IAAhB,EAAsB,2DAAtB;;AAEA,WAAO,SAAS,IAAT,CAAP;AACD;;AAED,WAAS,mBAAT,CAA6B,IAA7B,EAAmC;AACjC,eAAW,KAAK,IAAhB,EAAsB,aAAtB;;AAEA,QAAI,OAAO,KAAK,IAAhB;AAAA,QACI,SAAS,OAAO,KAAK,MAAZ,GAAqB,CADlC;;AAGA,QAAI,UAAU,CAAd,EAAiB;AACf,YAAM,MAAM,SAAN,CAAN;AACD,KAFD,MAEO,IAAI,UAAU,CAAd,EAAiB;AACtB,aAAO,SAAS,KAAK,CAAL,CAAT,CAAP;AACD,KAFM,MAEA;AACL,UAAI,IAAI,CAAC,CAAT;AAAA,UACI,SAAS,EADb;;AAGA,aAAO,EAAE,CAAF,GAAM,MAAb,EAAqB;AACnB,YAAI,KAAK,CAAT,EAAY;AACV,oBAAU,GAAV;AACD;AACD,kBAAU,SAAS,KAAK,CAAL,CAAT,CAAV;AACD;;AAED,aAAO,MAAP;AACD;AACF;;AAED,WAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,eAAW,KAAK,IAAhB,EAAsB,KAAtB;;AAEA,WAAO,GAAP;AACD;;AAED,WAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,eAAW,KAAK,IAAhB,EAAsB,OAAtB;;AAEA,QAAI,SAAS,GAAb;;AAEA,YAAQ,KAAK,QAAb;AACE,WAAK,QAAL;AACE;AACF,WAAK,QAAL;AACE,kBAAU,IAAV;AACA;AACF,WAAK,WAAL;AACE,kBAAU,IAAV;AACA;AACF,WAAK,mBAAL;AACE,kBAAU,IAAV;AACA;AACF;AACE,cAAM,MAAM,wBAAwB,KAAK,SAAnC,CAAN;AAbJ;;AAgBA,QAAI,OAAO,KAAK,IAAhB;AAAA,QACI,SAAS,OAAO,KAAK,MAAZ,GAAqB,CADlC;;AAGA,QAAI,UAAU,CAAd,EAAiB;AACf,gBAAU,SAAS,KAAK,CAAL,CAAT,CAAV;AACD,KAFD,MAEO;AACL,UAAI,IAAI,CAAC,CAAT;;AAEA,aAAO,EAAE,CAAF,GAAM,MAAb,EAAqB;AACnB,kBAAU,SAAS,KAAK,CAAL,CAAT,CAAV;AACD;AACF;;AAED,cAAU,GAAV;;AAEA,WAAO,MAAP;AACD;;AAED,WAAS,kBAAT,CAA4B,IAA5B,EAAkC;AAChC,eAAW,KAAK,IAAhB,EAAsB,YAAtB;;AAEA,QAAI,aAAa,EAAjB;AAAA,QACI,MAAM,KAAK,GADf;AAAA,QAEI,MAAM,KAAK,GAFf;;AAIA,YAAQ,GAAR;AACE,WAAK,SAAL;AACA,WAAK,IAAL;AACE,gBAAQ,GAAR;AACE,eAAK,CAAL;AACE,yBAAa,GAAb;AACA;AACF,eAAK,CAAL;AACE,yBAAa,GAAb;AACA;AACF;AACE,yBAAa,MAAM,GAAN,GAAY,IAAzB;AACA;AATJ;AAWA;AACF;AACE,YAAI,OAAO,GAAX,EAAgB;AACd,uBAAa,MAAM,GAAN,GAAY,GAAzB;AACD,SAFD,MAGK,IAAI,OAAO,CAAP,IAAY,OAAO,CAAvB,EAA0B;AAC7B,uBAAa,GAAb;AACD,SAFI,MAEE;AACL,uBAAa,MAAM,GAAN,GAAY,GAAZ,GAAkB,GAAlB,GAAwB,GAArC;AACD;AACD;AAxBJ;;AA2BA,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,oBAAc,GAAd;AACD;;AAED,WAAO,aAAa,KAAK,IAAL,CAAU,CAAV,CAAb,IAA6B,UAApC;AACD;;AAED,WAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC/B,eAAW,KAAK,IAAhB,EAAsB,WAAtB;;AAEA,WAAO,OAAO,KAAK,UAAnB;AACD;;AAED,WAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B,eAAW,KAAK,IAAhB,EAAsB,mFAAtB;;AAEA,WAAO,SAAS,IAAT,CAAP;AACD;;AAED,WAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,eAAW,KAAK,IAAhB,EAAsB,OAAtB;;AAEA,QAAI,OAAO,KAAK,IAAhB;AAAA,QACI,YAAY,KAAK,SADrB;;AAGA,YAAQ,IAAR;AACE,WAAK,eAAL;AACE,eAAO,QAAQ,cAAc,YAAY,EAA1B,CAAf;AACF,WAAK,mBAAL;AACE,eAAO,QAAQ,CAAC,OAAO,UAAU,QAAV,CAAmB,EAAnB,EAAuB,WAAvB,EAAR,EAA8C,KAA9C,CAAoD,CAAC,CAArD,CAAf;AACF,WAAK,YAAL;AACE,eAAO,OAAO,cAAc,SAAd,CAAd;AACF,WAAK,MAAL;AACE,eAAO,OAAO,SAAd;AACF,WAAK,OAAL;AACE,eAAO,OAAO,UAAU,QAAV,CAAmB,CAAnB,CAAd;AACF,WAAK,cAAL;AACE,gBAAQ,SAAR;AACE,eAAK,MAAL;AACE,mBAAO,KAAP;AACF,eAAK,KAAL;AACE,mBAAO,KAAP;AACF,eAAK,KAAL;AACE,mBAAO,KAAP;AACF,eAAK,KAAL;AACE,mBAAO,KAAP;AACF,eAAK,KAAL;AACE,mBAAO,KAAP;AACF,eAAK,KAAL;AACE,mBAAO,KAAP;AACF;AACE,kBAAM,MAAM,wBAAwB,SAA9B,CAAN;AAdJ;AAgBF,WAAK,QAAL;AACE,eAAO,cAAc,SAAd,CAAP;AACF,WAAK,eAAL;AACE,eAAO,QAAQ,CAAC,SAAS,UAAU,QAAV,CAAmB,EAAnB,EAAuB,WAAvB,EAAV,EAAgD,KAAhD,CAAsD,CAAC,CAAvD,CAAf;AACF,WAAK,wBAAL;AACE,eAAO,SAAS,UAAU,QAAV,CAAmB,EAAnB,EAAuB,WAAvB,EAAT,GAAgD,GAAvD;AACF;AACE,cAAM,MAAM,4BAA4B,IAAlC,CAAN;AAnCJ;AAqCD;;AAED;;AAEA,WAAS,WAAT,GAAuB,mBAAvB;AACA,WAAS,MAAT,GAAkB,cAAlB;AACA,WAAS,cAAT,GAA0B,sBAA1B;AACA,WAAS,oBAAT,GAAgC,4BAAhC;AACA,WAAS,mBAAT,GAA+B,2BAA/B;AACA,WAAS,WAAT,GAAuB,mBAAvB;AACA,WAAS,GAAT,GAAe,WAAf;AACA,WAAS,KAAT,GAAiB,aAAjB;AACA,WAAS,UAAT,GAAsB,kBAAtB;AACA,WAAS,SAAT,GAAqB,iBAArB;AACA,WAAS,KAAT,GAAiB,aAAjB;;AAEA;;AAEA;AACA;AACA,MAAI,OAAO,MAAP,IAAiB,UAAjB,IAA+B,QAAO,OAAO,GAAd,KAAqB,QAApD,IAAgE,OAAO,GAA3E,EAAgF;AAC9E;AACA,WAAO,YAAW;AAChB,aAAO;AACL,oBAAY;AADP,OAAP;AAGD,KAJD;AAKD;AACD;AARA,OASK,IAAI,eAAe,UAAnB,EAA+B;AAClC;AACA,kBAAY,QAAZ,GAAuB,QAAvB;AACD;AACD;AAJK,SAKA;AACH,aAAK,QAAL,GAAgB;AACd,sBAAY;AADE,SAAhB;AAGD;AACF,CAlZC,EAkZA,IAlZA,WAAD","file":"regjsgen-compiled.js","sourcesContent":["/*!\n * RegJSGen\n * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n * Available under MIT license <http://d10.mit-license.org/>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate;\n    var lowSurrogate;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return '';\n    }\n    var result = '';\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (\n        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n      ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  }\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    expected = assertType.hasOwnProperty(expected)\n      ? assertType[expected]\n      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generate(node) {\n    var type = node.type;\n\n    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n      return generate[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        length = terms ? terms.length : 0;\n\n    if (length == 1) {\n      return generateTerm(terms[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        result += generateTerm(terms[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        length = classRanges ? classRanges.length : 0;\n\n    var i = -1,\n        result = '[';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    result += ']';\n\n    return result;\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 0) {\n      throw Error('No body');\n    } else if (length == 1) {\n      return generate(body[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        if (i != 0) {\n          result += '|';\n        }\n        result += generate(body[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '(';\n\n    switch (node.behavior) {\n      case 'normal':\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 1) {\n      result += generate(body[0]);\n    } else {\n      var i = -1;\n\n      while (++i < length) {\n        result += generate(body[i]);\n      }\n    }\n\n    result += ')';\n\n    return result;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    switch (max) {\n      case undefined:\n      case null:\n        switch (min) {\n          case 0:\n            quantifier = '*'\n            break;\n          case 1:\n            quantifier = '+';\n            break;\n          default:\n            quantifier = '{' + min + ',}';\n            break;\n        }\n        break;\n      default:\n        if (min == max) {\n          quantifier = '{' + min + '}';\n        }\n        else if (min == 0 && max == 1) {\n          quantifier = '?';\n        } else {\n          quantifier = '{' + min + ',' + max + '}';\n        }\n        break;\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    return '\\\\' + node.matchIndex;\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x009:\n            return '\\\\t';\n          case 0x00A:\n            return '\\\\n';\n          case 0x00B:\n            return '\\\\v';\n          case 0x00C:\n            return '\\\\f';\n          case 0x00D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid codepoint: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  generate.alternative = generateAlternative;\n  generate.anchor = generateAnchor;\n  generate.characterClass = generateCharacterClass;\n  generate.characterClassEscape = generateCharacterClassEscape;\n  generate.characterClassRange = generateCharacterClassRange;\n  generate.disjunction = generateDisjunction;\n  generate.dot = generateDot;\n  generate.group = generateGroup;\n  generate.quantifier = generateQuantifier;\n  generate.reference = generateReference;\n  generate.value = generateValue;\n\n  /*--------------------------------------------------------------------------*/\n\n  // export regjsgen\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return {\n        'generate': generate\n      };\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    freeExports.generate = generate;\n  }\n  // in a browser or Rhino\n  else {\n    root.regjsgen = {\n      'generate': generate\n    };\n  }\n}.call(this));\n"]}