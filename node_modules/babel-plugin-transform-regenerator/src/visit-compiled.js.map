{"version":3,"sources":["visit.js"],"names":[],"mappings":"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","file":"visit-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nimport assert from \"assert\";\nimport * as t from \"babel-types\";\nimport { hoist } from \"./hoist\";\nimport { Emitter } from \"./emit\";\nimport * as util from \"./util\";\n\nlet getMarkInfo = require(\"private\").makeAccessor();\n\nexports.visitor = {\n  Function: {\n    exit: function(path, state) {\n      let node = path.node;\n\n      if (node.generator) {\n        if (node.async) {\n          // Async generator\n          if (state.opts.asyncGenerators === false) return;\n        } else {\n          // Plain generator\n          if (state.opts.generators === false) return;\n        }\n      } else if (node.async) {\n        // Async function\n        if (state.opts.async === false) return;\n      } else {\n        // Not a generator or async function.\n        return;\n      }\n\n      let contextId = path.scope.generateUidIdentifier(\"context\");\n      let argsId = path.scope.generateUidIdentifier(\"args\");\n\n      path.ensureBlock();\n      let bodyBlockPath = path.get(\"body\");\n\n      if (node.async) {\n        bodyBlockPath.traverse(awaitVisitor);\n      }\n\n      bodyBlockPath.traverse(functionSentVisitor, {\n        context: contextId\n      });\n\n      let outerBody = [];\n      let innerBody = [];\n\n      bodyBlockPath.get(\"body\").forEach(function(childPath) {\n        let node = childPath.node;\n        if (node && node._blockHoist != null) {\n          outerBody.push(node);\n        } else {\n          innerBody.push(node);\n        }\n      });\n\n      if (outerBody.length > 0) {\n        // Only replace the inner body if we actually hoisted any statements\n        // to the outer body.\n        bodyBlockPath.node.body = innerBody;\n      }\n\n      let outerFnExpr = getOuterFnExpr(path);\n      // Note that getOuterFnExpr has the side-effect of ensuring that the\n      // function has a name (so node.id will always be an Identifier), even\n      // if a temporary name has to be synthesized.\n      t.assertIdentifier(node.id);\n      let innerFnId = t.identifier(node.id.name + \"$\");\n\n      // Turn all declarations into vars, and replace the original\n      // declarations with equivalent assignment expressions.\n      let vars = hoist(path);\n\n      let didRenameArguments = renameArguments(path, argsId);\n      if (didRenameArguments) {\n        vars = vars || t.variableDeclaration(\"var\", []);\n        vars.declarations.push(t.variableDeclarator(\n          argsId, t.identifier(\"arguments\")\n        ));\n      }\n\n      let emitter = new Emitter(contextId);\n      emitter.explode(path.get(\"body\"));\n\n      if (vars && vars.declarations.length > 0) {\n        outerBody.push(vars);\n      }\n\n      let wrapArgs = [\n        emitter.getContextFunction(innerFnId),\n        // Async functions that are not generators don't care about the\n        // outer function because they don't need it to be marked and don't\n        // inherit from its .prototype.\n        node.generator ? outerFnExpr : t.nullLiteral(),\n        t.thisExpression()\n      ];\n\n      let tryLocsList = emitter.getTryLocsList();\n      if (tryLocsList) {\n        wrapArgs.push(tryLocsList);\n      }\n\n      let wrapCall = t.callExpression(\n        util.runtimeProperty(node.async ? \"async\" : \"wrap\"),\n        wrapArgs\n      );\n\n      outerBody.push(t.returnStatement(wrapCall));\n      node.body = t.blockStatement(outerBody);\n\n      let wasGeneratorFunction = node.generator;\n      if (wasGeneratorFunction) {\n        node.generator = false;\n      }\n\n      if (node.async) {\n        node.async = false;\n      }\n\n      if (wasGeneratorFunction && t.isExpression(node)) {\n        path.replaceWith(t.callExpression(util.runtimeProperty(\"mark\"), [node]));\n      }\n\n      // Generators are processed in 'exit' handlers so that regenerator only has to run on\n      // an ES5 AST, but that means traversal will not pick up newly inserted references\n      // to things like 'regeneratorRuntime'. To avoid this, we explicitly requeue.\n      path.requeue();\n    }\n  }\n};\n\n// Given a NodePath for a Function, return an Expression node that can be\n// used to refer reliably to the function object from inside the function.\n// This expression is essentially a replacement for arguments.callee, with\n// the key advantage that it works in strict mode.\nfunction getOuterFnExpr(funPath) {\n  let node = funPath.node;\n  t.assertFunction(node);\n\n  if (!node.id) {\n    // Default-exported function declarations, and function expressions may not\n    // have a name to reference, so we explicitly add one.\n    node.id = funPath.scope.parent.generateUidIdentifier(\"callee\");\n  }\n\n  if (node.generator && // Non-generator functions don't need to be marked.\n      t.isFunctionDeclaration(node)) {\n    let pp = funPath.findParent(function (path) {\n      return path.isProgram() || path.isBlockStatement();\n    });\n\n    if (!pp) {\n      return node.id;\n    }\n\n    let markDecl = getRuntimeMarkDecl(pp);\n    let markedArray = markDecl.declarations[0].id;\n    let funDeclIdArray = markDecl.declarations[0].init.callee.object;\n    t.assertArrayExpression(funDeclIdArray);\n\n    let index = funDeclIdArray.elements.length;\n    funDeclIdArray.elements.push(node.id);\n\n    return t.memberExpression(\n      markedArray,\n      t.numericLiteral(index),\n      true\n    );\n  }\n\n  return node.id;\n}\n\nfunction getRuntimeMarkDecl(blockPath) {\n  let block = blockPath.node;\n  assert.ok(Array.isArray(block.body));\n\n  let info = getMarkInfo(block);\n  if (info.decl) {\n    return info.decl;\n  }\n\n  info.decl = t.variableDeclaration(\"var\", [\n    t.variableDeclarator(\n      blockPath.scope.generateUidIdentifier(\"marked\"),\n      t.callExpression(\n        t.memberExpression(\n          t.arrayExpression([]),\n          t.identifier(\"map\"),\n          false\n        ),\n        [util.runtimeProperty(\"mark\")]\n      )\n    )\n  ]);\n\n  blockPath.unshiftContainer(\"body\", info.decl);\n\n  return info.decl;\n}\n\nfunction renameArguments(funcPath, argsId) {\n  let state = {\n    didRenameArguments: false,\n    argsId: argsId\n  };\n\n  funcPath.traverse(argumentsVisitor, state);\n\n  // If the traversal replaced any arguments references, then we need to\n  // alias the outer function's arguments binding (be it the implicit\n  // arguments object or some other parameter or variable) to the variable\n  // named by argsId.\n  return state.didRenameArguments;\n}\n\nlet argumentsVisitor = {\n  \"FunctionExpression|FunctionDeclaration\": function(path) {\n    path.skip();\n  },\n\n  Identifier: function(path, state) {\n    if (path.node.name === \"arguments\" && util.isReference(path)) {\n      path.replaceWith(state.argsId);\n      state.didRenameArguments = true;\n    }\n  }\n};\n\nlet functionSentVisitor = {\n  MetaProperty(path) {\n    let { node } = path;\n\n    if (node.meta.name === \"function\" && node.property.name === \"sent\") {\n      path.replaceWith(t.memberExpression(this.context, t.identifier(\"_sent\")));\n    }\n  }\n};\n\nlet awaitVisitor = {\n  Function: function(path) {\n    path.skip(); // Don't descend into nested function scopes.\n  },\n\n  AwaitExpression: function(path) {\n    // Convert await expressions to yield expressions.\n    let argument = path.node.argument;\n\n    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`\n    // causes the argument to be wrapped in such a way that the runtime\n    // can distinguish between awaited and merely yielded values.\n    path.replaceWith(t.yieldExpression(\n      t.callExpression(\n        util.runtimeProperty(\"awrap\"),\n        [argument]\n      ),\n      false\n    ));\n  }\n};\n"]}