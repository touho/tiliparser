{"version":3,"sources":["meta.js"],"names":[],"mappings":"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","file":"meta-compiled.js","sourcesContent":["\"use strict\";\n\nvar _assert = require(\"assert\");\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar m = require(\"private\").makeAccessor();\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    t.assertNode(node);\n\n    var result = false;\n\n    function check(child) {\n      if (result) {} else if (Array.isArray(child)) {\n        child.some(check);\n      } else if (t.isNode(child)) {\n        _assert2.default.strictEqual(result, false);\n        result = predicate(child);\n      }\n      return result;\n    }\n\n    var keys = t.VISITOR_KEYS[node.type];\n    if (keys) {\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var child = node[key];\n        check(child);\n      }\n    }\n\n    return result;\n  }\n\n  function predicate(node) {\n    t.assertNode(node);\n\n    var meta = m(node);\n    if (hasOwn.call(meta, propertyName)) return meta[propertyName];\n\n    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;\n\n    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;\n\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n\n  return predicate;\n}\n\nvar opaqueTypes = {\n  FunctionExpression: true\n};\n\nvar sideEffectTypes = {\n  CallExpression: true,\n  ForInStatement: true,\n  UnaryExpression: true,\n  BinaryExpression: true,\n  AssignmentExpression: true,\n  UpdateExpression: true,\n  NewExpression: true };\n\nvar leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n};\n\nfor (var type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);"]}