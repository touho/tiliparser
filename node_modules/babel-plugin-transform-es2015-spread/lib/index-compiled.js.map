{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,wBAAwB;;AAExB,QAAQ,UAAR,GAAqB,IAArB;;AAEA,IAAI,gBAAgB,QAAQ,oCAAR,CAApB;;AAEA,IAAI,gBAAgB,uBAAuB,aAAvB,CAApB;;AAEA,QAAQ,OAAR,GAAkB,WAAW,wBAAwB,IAAnC,EAAyC;AACzD,0BAAwB,IAAI,IAAI,KAAK,KAAb;;AAExB,WAAS,gBAAT,CAA0B,MAA1B,EAAkC,KAAlC,EAAyC,KAAzC,EAAgD;AAC9C,QAAI,MAAM,IAAN,CAAW,KAAX,IAAoB,CAAC,EAAE,YAAF,CAAe,OAAO,QAAtB,EAAgC,EAAE,MAAM,WAAR,EAAhC,CAAzB,EAAiF;AAC/E,aAAO,OAAO,QAAd;AACD,KAFD,MAEO;AACL,aAAO,MAAM,OAAN,CAAc,OAAO,QAArB,EAA+B,IAA/B,CAAP;AACD;AACF;;AAED,WAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,UAAI,EAAE,eAAF,CAAkB,MAAM,CAAN,CAAlB,CAAJ,EAAiC;AAC/B,eAAO,IAAP;AACD;AACF;AACD,WAAO,KAAP;AACD;;AAED,WAAS,KAAT,CAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC;AAClC,QAAI,QAAQ,EAAZ;;AAEA,QAAI,SAAS,EAAb;;AAEA,aAAS,IAAT,GAAgB;AACd,UAAI,CAAC,OAAO,MAAZ,EAAoB;AACpB,YAAM,IAAN,CAAW,EAAE,eAAF,CAAkB,MAAlB,CAAX;AACA,eAAS,EAAT;AACD;;AAED,UAAM,wBAAwB,IAAI,YAAY,KAAhB,EAAuB,WAAW,MAAM,OAAN,CAAc,SAAd,CAAlC,EAA4D,KAAK,CAAjE,EAAoE,YAAY,WAAW,SAAX,GAAuB,CAAC,GAAG,cAAc,OAAlB,EAA2B,SAA3B,CAArI,IAA8K;AAC5K;AACA,UAAI,KAAJ;;AAEA,UAAI,QAAJ,EAAc;AACZ,YAAI,MAAM,UAAU,MAApB,EAA4B;AAC5B,gBAAQ,UAAU,IAAV,CAAR;AACD,OAHD,MAGO;AACL,aAAK,UAAU,IAAV,EAAL;AACA,YAAI,GAAG,IAAP,EAAa;AACb,gBAAQ,GAAG,KAAX;AACD;;AAED,UAAI,OAAO,KAAX;;AAEA,UAAI,EAAE,eAAF,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B;AACA,cAAM,IAAN,CAAW,iBAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,CAAX;AACD,OAHD,MAGO;AACL,eAAO,IAAP,CAAY,IAAZ;AACD;AACF;;AAED;;AAEA,WAAO,KAAP;AACD;;AAED,SAAO;AACL,aAAS,EAAE;AACT,uBAAiB,SAAS,eAAT,CAAyB,IAAzB,EAA+B,KAA/B,EAAsC;AACrD,gCAAwB,IAAI,OAAO,KAAK,IAAhB;AACxB,gCAAwB,IAAI,QAAQ,KAAK,KAAjB;;AAExB,YAAI,WAAW,KAAK,QAApB;AACA,YAAI,CAAC,UAAU,QAAV,CAAL,EAA0B;;AAE1B,YAAI,QAAQ,MAAM,QAAN,EAAgB,KAAhB,EAAuB,KAAvB,CAAZ;AACA,YAAI,QAAQ,MAAM,KAAN,EAAZ;;AAEA,YAAI,CAAC,EAAE,iBAAF,CAAoB,KAApB,CAAL,EAAiC;AAC/B,gBAAM,OAAN,CAAc,KAAd;AACA,kBAAQ,EAAE,eAAF,CAAkB,EAAlB,CAAR;AACD;;AAED,aAAK,WAAL,CAAiB,EAAE,cAAF,CAAiB,EAAE,gBAAF,CAAmB,KAAnB,EAA0B,EAAE,UAAF,CAAa,QAAb,CAA1B,CAAjB,EAAoE,KAApE,CAAjB;AACD,OAjBM;AAkBP,8BAAwB,gBAAgB,SAAS,cAAT,CAAwB,IAAxB,EAA8B,KAA9B,EAAqC;AAC3E,gCAAwB,IAAI,OAAO,KAAK,IAAhB;AACxB,gCAAwB,IAAI,QAAQ,KAAK,KAAjB;;AAGxB,YAAI,OAAO,KAAK,SAAhB;AACA,YAAI,CAAC,UAAU,IAAV,CAAL,EAAsB;;AAEtB,YAAI,aAAa,KAAK,GAAL,CAAS,QAAT,CAAjB;AACA,YAAI,WAAW,OAAX,EAAJ,EAA0B;;AAE1B,YAAI,iBAAiB,EAAE,UAAF,CAAa,WAAb,CAArB;;AAEA,aAAK,SAAL,GAAiB,EAAjB;;AAEA,YAAI,QAAQ,wBAAwB,KAAK,CAAzC;AACA,YAAI,KAAK,MAAL,KAAgB,CAAhB,IAAqB,KAAK,CAAL,EAAQ,QAAR,CAAiB,IAAjB,KAA0B,WAAnD,EAAgE;AAC9D,kBAAQ,CAAC,KAAK,CAAL,EAAQ,QAAT,CAAR;AACD,SAFD,MAEO;AACL,kBAAQ,MAAM,IAAN,EAAY,KAAZ,EAAmB,KAAnB,CAAR;AACD;;AAED,YAAI,QAAQ,MAAM,KAAN,EAAZ;AACA,YAAI,MAAM,MAAV,EAAkB;AAChB,eAAK,SAAL,CAAe,IAAf,CAAoB,EAAE,cAAF,CAAiB,EAAE,gBAAF,CAAmB,KAAnB,EAA0B,EAAE,UAAF,CAAa,QAAb,CAA1B,CAAjB,EAAoE,KAApE,CAApB;AACD,SAFD,MAEO;AACL,eAAK,SAAL,CAAe,IAAf,CAAoB,KAApB;AACD;;AAED,YAAI,SAAS,KAAK,MAAlB;;AAEA,YAAI,WAAW,kBAAX,EAAJ,EAAqC;AACnC,cAAI,OAAO,MAAM,qBAAN,CAA4B,OAAO,MAAnC,CAAX;AACA,cAAI,IAAJ,EAAU;AACR,mBAAO,MAAP,GAAgB,EAAE,oBAAF,CAAuB,GAAvB,EAA4B,IAA5B,EAAkC,OAAO,MAAzC,CAAhB;AACA,6BAAiB,IAAjB;AACD,WAHD,MAGO;AACL,6BAAiB,OAAO,MAAxB;AACD;AACD,YAAE,wBAAF,CAA2B,MAA3B,EAAmC,EAAE,UAAF,CAAa,OAAb,CAAnC;AACD,SATD,MASO;AACL,eAAK,MAAL,GAAc,EAAE,gBAAF,CAAmB,KAAK,MAAxB,EAAgC,EAAE,UAAF,CAAa,OAAb,CAAhC,CAAd;AACD;;AAED,YAAI,EAAE,OAAF,CAAU,cAAV,CAAJ,EAA+B;AAC7B,2BAAiB,EAAE,cAAF,EAAjB;AACD;;AAED,aAAK,SAAL,CAAe,OAAf,CAAuB,cAAvB;AACD,OAnEM;AAoEP,8BAAwB,eAAe,SAAS,aAAT,CAAuB,IAAvB,EAA6B,KAA7B,EAAoC;AACzE,gCAAwB,IAAI,OAAO,KAAK,IAAhB;AACxB,gCAAwB,IAAI,QAAQ,KAAK,KAAjB;;AAExB,YAAI,OAAO,KAAK,SAAhB;AACA,YAAI,CAAC,UAAU,IAAV,CAAL,EAAsB;;AAEtB,YAAI,QAAQ,MAAM,IAAN,EAAY,KAAZ,EAAmB,KAAnB,CAAZ;;AAEA,YAAI,UAAU,EAAE,eAAF,CAAkB,CAAC,EAAE,WAAF,EAAD,CAAlB,CAAd;;AAEA,eAAO,EAAE,cAAF,CAAiB,EAAE,gBAAF,CAAmB,OAAnB,EAA4B,EAAE,UAAF,CAAa,QAAb,CAA5B,CAAjB,EAAsE,KAAtE,CAAP;;AAEA,aAAK,WAAL,CAAiB,EAAE,aAAF,CAAgB,EAAE,cAAF,CAAiB,EAAE,gBAAF,CAAmB,EAAE,gBAAF,CAAmB,EAAE,gBAAF,CAAmB,EAAE,UAAF,CAAa,UAAb,CAAnB,EAA6C,EAAE,UAAF,CAAa,WAAb,CAA7C,CAAnB,EAA4F,EAAE,UAAF,CAAa,MAAb,CAA5F,CAAnB,EAAsI,EAAE,UAAF,CAAa,OAAb,CAAtI,CAAjB,EAA+K,CAAC,KAAK,MAAN,EAAc,IAAd,CAA/K,CAAhB,EAAqN,EAArN,CAAjB;AACD;AAlFM;AADJ,GAAP;AAsFD,CAjJD;;AAmJA;AACA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,SAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"index-compiled.js","sourcesContent":["/*istanbul ignore next*/\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.default = function ( /*istanbul ignore next*/_ref) {\n  /*istanbul ignore next*/var t = _ref.types;\n\n  function getSpreadLiteral(spread, scope, state) {\n    if (state.opts.loose && !t.isIdentifier(spread.argument, { name: \"arguments\" })) {\n      return spread.argument;\n    } else {\n      return scope.toArray(spread.argument, true);\n    }\n  }\n\n  function hasSpread(nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      if (t.isSpreadElement(nodes[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function build(props, scope, state) {\n    var nodes = [];\n\n    var _props = [];\n\n    function push() {\n      if (!_props.length) return;\n      nodes.push(t.arrayExpression(_props));\n      _props = [];\n    }\n\n    for ( /*istanbul ignore next*/var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      /*istanbul ignore next*/\n      var _ref2;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n\n      var prop = _ref2;\n\n      if (t.isSpreadElement(prop)) {\n        push();\n        nodes.push(getSpreadLiteral(prop, scope, state));\n      } else {\n        _props.push(prop);\n      }\n    }\n\n    push();\n\n    return nodes;\n  }\n\n  return {\n    visitor: { /*istanbul ignore next*/\n      ArrayExpression: function ArrayExpression(path, state) {\n        /*istanbul ignore next*/var node = path.node;\n        /*istanbul ignore next*/var scope = path.scope;\n\n        var elements = node.elements;\n        if (!hasSpread(elements)) return;\n\n        var nodes = build(elements, scope, state);\n        var first = nodes.shift();\n\n        if (!t.isArrayExpression(first)) {\n          nodes.unshift(first);\n          first = t.arrayExpression([]);\n        }\n\n        path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier(\"concat\")), nodes));\n      },\n      /*istanbul ignore next*/CallExpression: function CallExpression(path, state) {\n        /*istanbul ignore next*/var node = path.node;\n        /*istanbul ignore next*/var scope = path.scope;\n\n\n        var args = node.arguments;\n        if (!hasSpread(args)) return;\n\n        var calleePath = path.get(\"callee\");\n        if (calleePath.isSuper()) return;\n\n        var contextLiteral = t.identifier(\"undefined\");\n\n        node.arguments = [];\n\n        var nodes = /*istanbul ignore next*/void 0;\n        if (args.length === 1 && args[0].argument.name === \"arguments\") {\n          nodes = [args[0].argument];\n        } else {\n          nodes = build(args, scope, state);\n        }\n\n        var first = nodes.shift();\n        if (nodes.length) {\n          node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier(\"concat\")), nodes));\n        } else {\n          node.arguments.push(first);\n        }\n\n        var callee = node.callee;\n\n        if (calleePath.isMemberExpression()) {\n          var temp = scope.maybeGenerateMemoised(callee.object);\n          if (temp) {\n            callee.object = t.assignmentExpression(\"=\", temp, callee.object);\n            contextLiteral = temp;\n          } else {\n            contextLiteral = callee.object;\n          }\n          t.appendToMemberExpression(callee, t.identifier(\"apply\"));\n        } else {\n          node.callee = t.memberExpression(node.callee, t.identifier(\"apply\"));\n        }\n\n        if (t.isSuper(contextLiteral)) {\n          contextLiteral = t.thisExpression();\n        }\n\n        node.arguments.unshift(contextLiteral);\n      },\n      /*istanbul ignore next*/NewExpression: function NewExpression(path, state) {\n        /*istanbul ignore next*/var node = path.node;\n        /*istanbul ignore next*/var scope = path.scope;\n\n        var args = node.arguments;\n        if (!hasSpread(args)) return;\n\n        var nodes = build(args, scope, state);\n\n        var context = t.arrayExpression([t.nullLiteral()]);\n\n        args = t.callExpression(t.memberExpression(context, t.identifier(\"concat\")), nodes);\n\n        path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Function\"), t.identifier(\"prototype\")), t.identifier(\"bind\")), t.identifier(\"apply\")), [node.callee, args]), []));\n      }\n    }\n  };\n};\n\n/*istanbul ignore next*/\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports[\"default\"];"]}